"use client";

import { useState, useRef, useEffect, useCallback } from "react";
import _, { random } from "lodash";

// 初期表示＆ループで追加する条文の配列
const TERM_CANDIDATES = [
  "本規約における「かき氷」とは、当サイトがそう定義するものに限られます。",
  "利用者は、画面上のピクセルが正方形であることを常に意識するものとします。",
  "スクロールバーの現在位置は、利用者の人生における現在地を必ずしも反映しません。",
  "当サイトの背景色は、予告なく利用者の気分に寄り添う色に変更されることがあります。",
  "第一条から第四条までの内容は、第五条によってその効力を失います。",
  "第五条は存在しません。",
  "利用者は、ブラウザのキャッシュを自身の記憶と混同してはなりません。",
  "当サイトを閲覧中、キーボードの「F5」キーを押すことは、運命への挑戦とみなされます。",
  "注文確定ボタンは、押されるまでその存在を確定しません。",
  "「イチゴ味」とは、イチゴの概念を表現したものであり、実際のイチゴ味を保証するものではありません。",
  "利用者は、1分間に60回以上まばたきをしないよう努力する義務を負います。",
  "当サイトのフォントは、読めそうで読めない絶妙な可読性を維持します。",
  "「はい」または「YES」という選択肢は、質問の意図を肯定するものとは限りません。",
  "利用者は、モニターから発せられる光が粒子であり、かつ波であることを受け入れます。",
  "サーバーとの通信は、時折、量子トンネル効果を介して行われる場合があります。",
  "シロップの粘度は、その日の気圧によってリアルタイムに変動します。",
  "本規約のいずれかの条項が無効とされた場合、他の全ての条項も無効となります。",
  "前項の規定は、この条項によって無効とされます。",
  "利用者のマウスポインターの軌道は、当サイトの品質向上のため記録されます。",
  "記録された軌道は、現代アートとして販売される可能性があります。",
  "氷の結晶構造は、利用者の精神状態を反映して変化します。",
  "「トッピング」の選択は、不可逆的な未来の選択と同義です。",
  "当サイトのソースコードを読むことは、深淵を覗く行為とみなされます。",
  "深淵を覗くとき、深淵もまたこちらを覗いています。",
  "サイトの表示が崩れた場合、それは仕様です。",
  "利用者は、円周率が割り切れないことを悲しんではなりません。",
  "注文したかき氷は、三次元空間に存在するとは限りません。",
  "配送先の住所は、必ずしも物理的な場所を指定するものではありません。",
  "当サイトは、Internet Explorer 6での閲覧を推奨します。",
  "推奨はしますが、表示を保証するものではありません。",
  "利用者は、自身の思考が現実を創造する可能性を否定しないものとします。",
  "支払い方法は、現物支給（氷）を原則とします。",
  "領収書は、古代ルーン文字で発行される場合があります。",
  "解読の義務は、利用者が負うものとします。",
  "かき氷の温度は、絶対零度を超えるとは断定できません。",
  "利用者は、当サイトの利用を通じて、無意味の意味について考察するものとします。",
  "本規約は、利用者の夢の中に直接表示されることがあります。",
  "その際の既読判定は、夢の中の利用者の同意に基づきます。",
  "ページの読み込みが遅いのは、サーバーが瞑想しているためです。",
  "サーバーの悟りを妨げる行為（リロード連打など）は固く禁じます。",
  "「宇治金時」の「時」は、時間そのものを指し示します。",
  "これを注文した利用者は、時間の流れを操作する権利を得る可能性があります。",
  "権利の行使によって生じた時空の歪みに対し、当サイトは一切の責任を負いません。",
  "利用者は、クリック音が隣人に聞こえないよう配慮しなければなりません。",
  "404エラーページは、当サイトにおける隠しステージへの入り口です。",
  "隠しステージの存在は確認されていません。",
  "かき氷の器は、クラインの壺である場合があります。",
  "その場合、かき氷を食べ終えることは論理的に不可能です。",
  "本規約は、下から上にスクロールすることで、全く異なる意味を持つよう設計されています。",
  "その設計は、まだ実装されていません。",
  "利用者は、自身の影と対話する時間を設けることが推奨されます。",
  "対話の内容は、当サイトのサーバーに自動的に送信されます。",
  "送信された内容は、次世代のかき氷フレーバー開発に利用されます。",
  "「影味」のかき氷が登場した場合、それは前項に起因します。",
  "当サイトのドメイン名は、気まぐれで変更されます。",
  "変更の通知は、伝書鳩によって行われるものとします。",
  "利用者は、伝書鳩を受け取るための環境を整備する義務を負います。",
  "かき氷を待つ間、利用者は無であることについて考える必要があります。",
  "考えることをやめた時、かき氷は完成します。",
  "Cookieの使用に同意することは、魂の一部を当サイトに預けることと同義です。",
  "預けられた魂は、サイトの表示速度向上のための生贄とされます。",
  "「利用者の声」は、すべて当サイトのスタッフによって創作されたものです。",
  "この条項を読んだ利用者は、この秘密を保持しなければなりません。",
  "秘密を漏洩した場合、ペナルティとしてかき氷の量が半分になります。",
  "量の半分は、体積ではなく次元によって定義されます。",
  "利用者は、当サイトが現実ではない可能性を常に考慮に入れるものとします。",
  "注文後、確認メールは送信されません。テレパシーでご確認ください。",
  "テレパシーの受信能力は、利用者の責任において開発するものとします。",
  "「限定フレーバー」は、誰にも注文されないことによってその限定性を保ちます。",
  "これを注文する行為は、矛盾への挑戦です。",
  "サイト上で使用される画像は、すべてAIによって生成された架空のかき氷です。",
  "実在のかき氷とは一切関係ありません。",
  "スクロールする行為は、地球の自転に微細な影響を与えます。",
  "これによる天変地異について、当サイトは関知しません。",
  "利用者は、本規約を音読することが義務付けられています。",
  "小声での音読は、同意とみなされません。",
  "本規約の文章量は、常に増え続ける可能性があります。",
  "すべての条項を読了することは、物理的に不可能かもしれません。",
  "それでもなお、利用者は読了したとみなされます。",
  "ログインパスワードは、毎秒変更されます。",
  "正しいパスワードは、利用者の心の中に直接表示されます。",
  "心の声に耳を澄ませてください。",
  "かき氷のシロップは、情報伝達媒体としての側面を持ちます。",
  "シロップを摂取することで、宇宙の真理を垣間見る可能性があります。",
  "垣間見た結果、発狂しても当サイトは責任を負いません。",
  "本サイトは、利用者に対し、無償の愛を提供します。",
  "愛の定義は、当サイトが一方的に決定します。",
  "返品・交換は受け付けません。時間は不可逆です。",
  "当サイトの存在自体が、壮大な社会実験の一部です。",
  "利用者は、被験者として適切な行動を心がけてください。",
  "「よくある質問」のページには、質問しか書かれていません。",
  "答えは、利用者が自ら見つけ出すものです。",
  "決済処理中、画面に表示されるプログレスバーは、何ものも進捗していません。",
  "あれはデザインです。",
  "本規約は、フィクションであり、実在の人物・団体・かき氷とは一切関係ありません。",
  "ただし、同意した場合はこの限りではありません。",
  "当サイトのfaviconは、404ピクセル×404ピクセルの透明な画像です。",
  "見えないものを見る努力が、利用者には求められます。",
  "本規約の最終条項は、常にその一つ前の条項によって参照されます。",
  "この規約に同意したという事実は、同意した瞬間から忘れなければなりません。",
];

const INITIAL_TERMS: string[][] = [];
for (let i = 0; i < 10; i++) {
  INITIAL_TERMS.push(_.sampleSize(TERM_CANDIDATES, random(5, 12)));
}

function useTerms() {
  const [terms, setTerms] = useState<string[][]>(INITIAL_TERMS);
  const addTerms = useCallback(() => {
    setTerms((prevTerms) => [
      ...prevTerms,
      _.sampleSize(TERM_CANDIDATES, random(5, 12)),
      _.sampleSize(TERM_CANDIDATES, random(5, 12)),
      _.sampleSize(TERM_CANDIDATES, random(5, 12)),
    ]);
  }, []);
  return { terms, addTerms };
}

export default function InfiniteTerms() {
  // 表示する全ての条文を管理するState
  const { terms, addTerms } = useTerms();

  // 監視対象（リストの末尾の要素）への参照
  const sentinelRef = useRef(null);

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        // isIntersectingがtrueなら、監視対象が画面内に入ったということ
        if (entries[0].isIntersecting) {
          addTerms();
        }
      },
      {
        threshold: 1.0,
      }
    );

    // 監視対象の要素(ref.current)を監視開始
    const currentSentinel = sentinelRef.current;
    if (currentSentinel) {
      observer.observe(currentSentinel);
    }

    // クリーンアップ関数：コンポーネントがアンマウントされる時に監視を停止
    return () => {
      if (currentSentinel) {
        observer.unobserve(currentSentinel);
      }
    };
  }, [addTerms]);

  let articleCounter = 1;

  return (
    <div className="w-dvw h-dvh overflow-scroll snap-mandatory snap-y">
      <div className="space-y-4 text-gray-700">
        {terms.map((chapter, chapterIndex) => (
          <div key={chapterIndex}>
            <span className="font-semibold text-xl snap-start">
              第{articleCounter++}条：
            </span>
            <ol className="list-decimal list-inside mb-2">
              {chapter.map((articleText) => (
                <li
                  key={articleCounter}
                  className="mb-2 text-base leading-relaxed"
                >
                  {articleText}
                </li>
              ))}
            </ol>
          </div>
        ))}
      </div>
      {/* このdivが監視対象 */}
      <div ref={sentinelRef} className="h-10"></div>
    </div>
  );
}
